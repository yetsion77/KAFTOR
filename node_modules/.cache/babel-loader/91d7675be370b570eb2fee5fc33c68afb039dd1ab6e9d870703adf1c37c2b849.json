{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\KAFTOR\\\\src\\\\context\\\\GameContext.jsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GameContext = /*#__PURE__*/createContext();\nexport const GameProvider = ({\n  children\n}) => {\n  _s();\n  const [boards, setBoards] = useState([]);\n  const [currentBoard, setCurrentBoard] = useState(null);\n  const [visibleBoard, setVisibleBoard] = useState([]);\n  const [hiddenBoard, setHiddenBoard] = useState([]);\n  const [connectingWords, setConnectingWords] = useState([]);\n  const [selectedCell, setSelectedCell] = useState(null);\n  const [guessedCells, setGuessedCells] = useState([]);\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [hints, setHints] = useState({\n    targetWordHints: Array(9).fill(false),\n    connectingWordHints: Array(9).fill(false)\n  });\n\n  // טעינת לוחות שמורים בעת טעינת האפליקציה\n  useEffect(() => {\n    const savedBoards = localStorage.getItem('kaftor-veferach-boards');\n    if (savedBoards) {\n      setBoards(JSON.parse(savedBoards));\n    }\n  }, []);\n\n  // שמירת לוחות בכל פעם שהם משתנים\n  useEffect(() => {\n    if (boards.length > 0) {\n      localStorage.setItem('kaftor-veferach-boards', JSON.stringify(boards));\n    }\n  }, [boards]);\n\n  // יצירת לוח חדש\n  const createBoard = boardData => {\n    const newBoard = {\n      id: Date.now().toString(),\n      name: boardData.name,\n      phrases: boardData.phrases,\n      createdAt: new Date().toISOString()\n    };\n    setBoards([...boards, newBoard]);\n    return newBoard.id;\n  };\n\n  // טעינת לוח למשחק\n  const loadBoard = boardId => {\n    const board = boards.find(b => b.id === boardId);\n    if (!board) return false;\n    setCurrentBoard(board);\n\n    // עיבוד הצירופים ליצירת הלוחות\n    const {\n      visibleCells,\n      hiddenCells,\n      connecting\n    } = processBoard(board.phrases);\n    setVisibleBoard(visibleCells);\n    setHiddenBoard(hiddenCells);\n    setConnectingWords(connecting);\n    setGuessedCells([]);\n    setIsGameOver(false);\n    setHints({\n      targetWordHints: Array(9).fill(false),\n      connectingWordHints: Array(9).fill(false)\n    });\n    return true;\n  };\n\n  // עיבוד הצירופים ליצירת הלוחות\n  const processBoard = phrases => {\n    const visibleCells = [];\n    const hiddenCells = [];\n    const connecting = [];\n    phrases.forEach((phrase, index) => {\n      const words = phrase.split(' ');\n      if (words.length >= 3) {\n        // בחירה אקראית אם להציג את המילה הראשונה או השלישית\n        const showFirst = Math.random() > 0.5;\n        if (showFirst) {\n          visibleCells.push(words[0]);\n          hiddenCells.push(words[2]);\n        } else {\n          visibleCells.push(words[2]);\n          hiddenCells.push(words[0]);\n        }\n        connecting.push(words[1]);\n      }\n    });\n    return {\n      visibleCells,\n      hiddenCells,\n      connecting\n    };\n  };\n\n  // בדיקת ניחוש\n  const checkGuess = (cellIndex, guess) => {\n    if (hiddenBoard[cellIndex].trim().toLowerCase() === guess.trim().toLowerCase()) {\n      setGuessedCells([...guessedCells, cellIndex]);\n\n      // בדיקה אם המשחק הסתיים\n      if (guessedCells.length + 1 === hiddenBoard.length) {\n        setIsGameOver(true);\n      }\n      return true;\n    }\n    return false;\n  };\n\n  // חשיפת רמז - האות הראשונה של המילה המבוקשת\n  const revealTargetHint = cellIndex => {\n    const newHints = {\n      ...hints\n    };\n    newHints.targetWordHints[cellIndex] = true;\n    setHints(newHints);\n    return hiddenBoard[cellIndex].charAt(0);\n  };\n\n  // חשיפת רמז - האות הראשונה של המילה המקשרת\n  const revealConnectingHint = cellIndex => {\n    const newHints = {\n      ...hints\n    };\n    newHints.connectingWordHints[cellIndex] = true;\n    setHints(newHints);\n    return connectingWords[cellIndex].charAt(0);\n  };\n\n  // מחיקת לוח\n  const deleteBoard = boardId => {\n    setBoards(boards.filter(board => board.id !== boardId));\n  };\n  return /*#__PURE__*/_jsxDEV(GameContext.Provider, {\n    value: {\n      boards,\n      currentBoard,\n      visibleBoard,\n      hiddenBoard,\n      connectingWords,\n      selectedCell,\n      guessedCells,\n      isGameOver,\n      hints,\n      setSelectedCell,\n      createBoard,\n      loadBoard,\n      checkGuess,\n      revealTargetHint,\n      revealConnectingHint,\n      deleteBoard\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 5\n  }, this);\n};\n_s(GameProvider, \"1qlzUWFNCEks0TirrEqnGSrxC5E=\");\n_c = GameProvider;\nvar _c;\n$RefreshReg$(_c, \"GameProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","GameContext","GameProvider","children","_s","boards","setBoards","currentBoard","setCurrentBoard","visibleBoard","setVisibleBoard","hiddenBoard","setHiddenBoard","connectingWords","setConnectingWords","selectedCell","setSelectedCell","guessedCells","setGuessedCells","isGameOver","setIsGameOver","hints","setHints","targetWordHints","Array","fill","connectingWordHints","savedBoards","localStorage","getItem","JSON","parse","length","setItem","stringify","createBoard","boardData","newBoard","id","Date","now","toString","name","phrases","createdAt","toISOString","loadBoard","boardId","board","find","b","visibleCells","hiddenCells","connecting","processBoard","forEach","phrase","index","words","split","showFirst","Math","random","push","checkGuess","cellIndex","guess","trim","toLowerCase","revealTargetHint","newHints","charAt","revealConnectingHint","deleteBoard","filter","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/User/KAFTOR/src/context/GameContext.jsx"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\n\r\nexport const GameContext = createContext();\r\n\r\nexport const GameProvider = ({ children }) => {\r\n  const [boards, setBoards] = useState([]);\r\n  const [currentBoard, setCurrentBoard] = useState(null);\r\n  const [visibleBoard, setVisibleBoard] = useState([]);\r\n  const [hiddenBoard, setHiddenBoard] = useState([]);\r\n  const [connectingWords, setConnectingWords] = useState([]);\r\n  const [selectedCell, setSelectedCell] = useState(null);\r\n  const [guessedCells, setGuessedCells] = useState([]);\r\n  const [isGameOver, setIsGameOver] = useState(false);\r\n  const [hints, setHints] = useState({\r\n    targetWordHints: Array(9).fill(false),\r\n    connectingWordHints: Array(9).fill(false)\r\n  });\r\n\r\n  // טעינת לוחות שמורים בעת טעינת האפליקציה\r\n  useEffect(() => {\r\n    const savedBoards = localStorage.getItem('kaftor-veferach-boards');\r\n    if (savedBoards) {\r\n      setBoards(JSON.parse(savedBoards));\r\n    }\r\n  }, []);\r\n\r\n  // שמירת לוחות בכל פעם שהם משתנים\r\n  useEffect(() => {\r\n    if (boards.length > 0) {\r\n      localStorage.setItem('kaftor-veferach-boards', JSON.stringify(boards));\r\n    }\r\n  }, [boards]);\r\n\r\n  // יצירת לוח חדש\r\n  const createBoard = (boardData) => {\r\n    const newBoard = {\r\n      id: Date.now().toString(),\r\n      name: boardData.name,\r\n      phrases: boardData.phrases,\r\n      createdAt: new Date().toISOString()\r\n    };\r\n    \r\n    setBoards([...boards, newBoard]);\r\n    return newBoard.id;\r\n  };\r\n\r\n  // טעינת לוח למשחק\r\n  const loadBoard = (boardId) => {\r\n    const board = boards.find(b => b.id === boardId);\r\n    if (!board) return false;\r\n    \r\n    setCurrentBoard(board);\r\n    \r\n    // עיבוד הצירופים ליצירת הלוחות\r\n    const { visibleCells, hiddenCells, connecting } = processBoard(board.phrases);\r\n    \r\n    setVisibleBoard(visibleCells);\r\n    setHiddenBoard(hiddenCells);\r\n    setConnectingWords(connecting);\r\n    setGuessedCells([]);\r\n    setIsGameOver(false);\r\n    setHints({\r\n      targetWordHints: Array(9).fill(false),\r\n      connectingWordHints: Array(9).fill(false)\r\n    });\r\n    \r\n    return true;\r\n  };\r\n\r\n  // עיבוד הצירופים ליצירת הלוחות\r\n  const processBoard = (phrases) => {\r\n    const visibleCells = [];\r\n    const hiddenCells = [];\r\n    const connecting = [];\r\n    \r\n    phrases.forEach((phrase, index) => {\r\n      const words = phrase.split(' ');\r\n      if (words.length >= 3) {\r\n        // בחירה אקראית אם להציג את המילה הראשונה או השלישית\r\n        const showFirst = Math.random() > 0.5;\r\n        \r\n        if (showFirst) {\r\n          visibleCells.push(words[0]);\r\n          hiddenCells.push(words[2]);\r\n        } else {\r\n          visibleCells.push(words[2]);\r\n          hiddenCells.push(words[0]);\r\n        }\r\n        \r\n        connecting.push(words[1]);\r\n      }\r\n    });\r\n    \r\n    return { visibleCells, hiddenCells, connecting };\r\n  };\r\n\r\n  // בדיקת ניחוש\r\n  const checkGuess = (cellIndex, guess) => {\r\n    if (hiddenBoard[cellIndex].trim().toLowerCase() === guess.trim().toLowerCase()) {\r\n      setGuessedCells([...guessedCells, cellIndex]);\r\n      \r\n      // בדיקה אם המשחק הסתיים\r\n      if (guessedCells.length + 1 === hiddenBoard.length) {\r\n        setIsGameOver(true);\r\n      }\r\n      \r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  // חשיפת רמז - האות הראשונה של המילה המבוקשת\r\n  const revealTargetHint = (cellIndex) => {\r\n    const newHints = { ...hints };\r\n    newHints.targetWordHints[cellIndex] = true;\r\n    setHints(newHints);\r\n    return hiddenBoard[cellIndex].charAt(0);\r\n  };\r\n\r\n  // חשיפת רמז - האות הראשונה של המילה המקשרת\r\n  const revealConnectingHint = (cellIndex) => {\r\n    const newHints = { ...hints };\r\n    newHints.connectingWordHints[cellIndex] = true;\r\n    setHints(newHints);\r\n    return connectingWords[cellIndex].charAt(0);\r\n  };\r\n\r\n  // מחיקת לוח\r\n  const deleteBoard = (boardId) => {\r\n    setBoards(boards.filter(board => board.id !== boardId));\r\n  };\r\n\r\n  return (\r\n    <GameContext.Provider\r\n      value={{\r\n        boards,\r\n        currentBoard,\r\n        visibleBoard,\r\n        hiddenBoard,\r\n        connectingWords,\r\n        selectedCell,\r\n        guessedCells,\r\n        isGameOver,\r\n        hints,\r\n        setSelectedCell,\r\n        createBoard,\r\n        loadBoard,\r\n        checkGuess,\r\n        revealTargetHint,\r\n        revealConnectingHint,\r\n        deleteBoard\r\n      }}\r\n    >\r\n      {children}\r\n    </GameContext.Provider>\r\n  );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}